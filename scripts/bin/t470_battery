#!/usr/bin/python3
# T470 has one internal battery and one hot-swappable battery
# this script prints out combined battery status for these two batteries and adapter status

import logging
from dataclasses import dataclass
import sys
from typing import Tuple
from pprint import pprint

logging.basicConfig(level=logging.INFO,
                    handlers=[logging.StreamHandler(sys.stderr)])
logger = logging.getLogger(__name__)

PATH_BAT0_UEVENT = "/sys/class/power_supply/BAT0/uevent"
PATH_BAT1_UEVENT = "/sys/class/power_supply/BAT1/uevent"
# /sys/class/power_supply/BAT0/uevent
PATH_AC_ONLINE = "/sys/class/power_supply/AC/online"


@dataclass
class Uevent():
    capacity: str
    capacity_level: str
    cycle_count: str
    energy_full: str
    energy_full_design: str
    energy_now: str
    manufacturer: str
    model_name: str
    name: str
    power_now: str
    present: str
    serial_number: str
    status: str
    type: str
    technology: str
    voltage_min_design: str
    voltage_now: str


def parse_uevent(raw_uevent: str) -> Uevent:
    uevent = {}
    for line in raw_uevent.splitlines():
        key, value = line.split('=', maxsplit=1)
        key = key.lower().replace('power_supply_', '')
        uevent[key] = value
    return Uevent(**uevent)


def get_uevent(path_bat_x_uevent):
    with open(path_bat_x_uevent, mode='r') as f:
        raw_uevent = f.read()
        return parse_uevent(raw_uevent)


bat0_uevent = get_uevent(PATH_BAT0_UEVENT)
bat1_uevent = get_uevent(PATH_BAT1_UEVENT)
# pprint(bat0_uevent, indent=4)
# pprint(bat1_uevent, indent=4)

ac_online = False
with open(PATH_AC_ONLINE, mode='r') as f:
    ac_online = f.read().strip() == "1"


def format_capacity(capacity: str) -> str:
    capacity = int(capacity)
    if capacity == 100:
        return 'Full'

    return f'{capacity}%'


def format_ac_status(ac_online: bool):
    if ac_online:
        return 'ïƒ§ '
    else:
        return ''


def calc_remaining_seconds(bat_uevent: Uevent,
                           present_rate=None) -> Tuple[int, float]:
    if int(bat_uevent.power_now) == 0 and present_rate is None:
        return 0, present_rate

    voltage = int(bat_uevent.voltage_now) / 1000
    if present_rate is None:
        present_rate = int(bat_uevent.power_now) / 1000
        present_rate = present_rate * 1000 / voltage

    remaining_energy = int(bat_uevent.energy_now) / 1000
    remaining_capacity = remaining_energy * 1000 / voltage
    # percentage = remaining_capacity * 100 / int(bat_uevent.energy_full)
    seconds = 3600 * remaining_capacity / present_rate
    return int(seconds), present_rate


def calc_remaining(seconds) -> str:
    """Returns hours:minutes remaining time estimate"""

    hours = int(seconds / 3600)
    seconds -= 3600 * hours
    minutes = int(seconds / 60)
    seconds -= 60 * minutes
    return "[{:02d}:{:02d}]".format(hours, minutes)


# T470 will first drain external (BAT1) then internal (BAT0)
# we first calculate for Bat1, so that we have a rate to calc remaining time for Bat0 that is not currently used
# in use case: BAT0 full, BAT1 discharging.

# cases:
# bat0 full, bat1 discharging       RATE via bat1
# bat0 full, bat1 charging          NO RATE
# bat0 discharching, bat1 empty     RATE via bat0, but doesnt matter
# bat0 charging, bat1 empty         NO RATE
try:
    b1_seconds, b1_pr = calc_remaining_seconds(bat1_uevent)
    b0_seconds, b0_pr = calc_remaining_seconds(bat0_uevent, b1_pr)
    logger.info(f'b0+b1 seconds remaining = {b0_seconds} + {b1_seconds}')
    remaining_txt = calc_remaining(b0_seconds + b1_seconds)
except ZeroDivisionError as exc:
    pprint(bat0_uevent, indent=4)
    pprint(bat1_uevent, indent=4)
    logger.exception(f'zero division')
    remaining_txt = 'fix charging'

print(f'B{format_ac_status(ac_online)}{format_capacity(bat0_uevent.capacity)}'
      '+'
      f'{format_capacity(bat1_uevent.capacity)}'
      f' {remaining_txt}')
