#!/bin/bash
#
# Panel using lemonbar.

if [[ $(pgrep -cx panel) -gt 1 ]]; then
  printf "%s\n" "The panel is already running." >&2
  exit 1
fi

trap "trap - TERM; kill 0" INT TERM QUIT EXIT

if [ ! -f ~/.env ]; then
    export WIFI_INTERFACE='wlp7s0'
    export BATTERY='BAT0'
    export AC_ADAPTER='ADP1'
else
    . ~/.env
fi

# if scale factor not set, set to one
if [ -z ${HIDPI_SCALE_FACTOR+x} ]; then
    HIDPI_SCALE_FACTOR=1
fi

. panel_colors

HEIGHT=$(echo "24 * $HIDPI_SCALE_FACTOR" | bc)
LINE_HEIGHT=$(echo "2 * $HIDPI_SCALE_FACTOR" | bc)
FONT="Roboto Mono:size=8"
ICON_FONT="FontAwesome:size=11"
FIFO=/tmp/panel-fifo

# Track the current offset for making a bar per monitor, so we can make bars with specific geometries.
CUR_X_OFFSET=0

num_mon="$(bspc query -M)"

for i in $num_mon; do

    [[ -e "$FIFO$i" ]] && rm "$FIFO$i"
    mkfifo "$FIFO$i"

    bspc config top_padding $HEIGHT

    bspc subscribe > "$FIFO$i" &
    xtitle -sf "T%s\n" -t 100 > "$FIFO$i" &
    DATE=$(echo -e '\uf073')
    CLOCK=$(echo -e '\uf017')
    clock -sf "C$DATE %a %d %b  $CLOCK %H:%M:%S" -i 1 > "$FIFO$i" &

    while true;
    do
        ip addr | grep "$WIFI_INTERFACE:" &>/dev/null
        if [ $? = 1 ]; then
            echo "set your WIFI_INTERFACE in ~/.env"
            exit
        fi
        SSID=$(essid -w $WIFI_INTERFACE)
        if [ ! "$SSID" = "" ]; then
            echo -e 'E\uf1eb' $SSID
        fi
        sleep 10
    done > "$FIFO$i" &

    panel_volume &

    while true;
    do
        if [ ! -f /sys/class/power_supply/$BATTERY/capacity ]; then
            exit
        fi
        capacity=$(cat /sys/class/power_supply/$BATTERY/capacity)
        adaptor_online=$(cat /sys/class/power_supply/$AC_ADAPTER/online)

        if [ $adaptor_online == 1 ]; then
            echo -en 'B\uf0e7'
        elif [ $capacity -ge 90 ]; then
            echo -en 'B\uf240'
        elif [ $capacity -ge 75 -a $capacity -lt 90 ]; then
            echo -en 'B\uf241'
        elif [ $capacity -ge 50 -a $capacity -lt 75 ]; then
            echo -en 'B\uf242'
        elif [ $capacity -ge 25 -a $capacity -lt 50 ]; then
            echo -en 'B\uf243'
        elif [ $capacity -ge 0 -a $capacity -lt 25 ]; then
            echo -en 'B\uf244'
        fi

        echo " $capacity%"

        sleep 30
    done > "$FIFO$i" &

    CURRENT_MONITOR_WIDTH=$(bspc query -T -m $i | jq ".rectangle.width")

    panel_bar < "$FIFO$i" | lemonbar \
        -g $CURRENT_MONITOR_WIDTH"x"$HEIGHT+$CUR_X_OFFSET+0 \
        -f "$FONT" \
        -f "$ICON_FONT" \
        -F "$COLOR_FOREGROUND" \
        -B "$COLOR_BACKGROUND" \
        -a 20 \
        -u "$LINE_HEIGHT" | sh &

    # Increment the x offset for the next monitor.
    CUR_X_OFFSET=$(( CUR_X_OFFSET + CURRENT_MONITOR_WIDTH ))

done

wait
