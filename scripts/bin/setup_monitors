#!/bin/zsh

set -Eeuxo pipefail

monitor_count=$(xrandr | grep -c " connected")

eval $(monitor_detection)

if [[ "$HOST" == "amara" ]]; then
    if [[ "$monitor_count" == "2" ]]; then

        # Downscale eDP1, because the 7680x2160 is too much for the integrated GPU
        xrandr \
            --output eDP-1 \
            --auto \
            --fb 3840x1080 \
            --scale 0.5x0.5 \
            --pos 0x0 \
            --output HDMI-1 \
            --auto \
            --scale 1x1 \
            --mode 1920x1080 \
            --pos 1920x0
        #xrandr --dpi 96
        # .Xresources merge is needed to get 96 dpi, above command does not work
        # probably because two outputs are combined into one screen
        xrdb -merge ~/.Xresources.standing
        echo "HIDPI_SCALE_FACTOR=1; export HIDPI_SCALE_FACTOR;"
    else
        echo "GDK_SCALE=2; export GDK_SCALE;"
        echo "GDK_DPI_SCALE=0.5; export GDK_DPI_SCALE;"
        xrandr --dpi 192
        echo "HIDPI_SCALE_FACTOR=2; export HIDPI_SCALE_FACTOR;"
    fi
else
    echo "HIDPI_SCALE_FACTOR=1; export HIDPI_SCALE_FACTOR;"
    if [[ "$monitor_count" == "2" ]]; then
        if [[ "${1:-}" == "restart-monitor" ]]; then
            xrandr --output $MON1 --off
            sleep 2
        fi
        xrandr --output $MON0 --auto --output $MON1 --auto --left-of $MON0
    fi
    # .Xresources merge is needed to get 96 dpi
    xrdb -merge ~/.Xresources.standing
fi

# get connected monitors from xrandr
monitors=$(pyrandr.py)

# get active bspwm monitors
# the wm -d gives a json dump where the monitor id's are decimal, the bspc query -M returns hexadecimal
# so keep that in mind when doing dirty string comparisons
bspwm_monitors=$(bspc wm -d | jq ".monitors[].id")

echo "active BSPWM monitors: [$bspwm_monitors]"

monitor_id_from_name() {
    bspc wm -d | jq ".monitors[] | select(.name == \"$1\").id"
}

printf '%s\n' "$monitors" | while IFS= read -r mon
do
    mon_id=$(monitor_id_from_name $mon)
    if [ -z $mon_id ]; then
        echo "for monitor '$mon': should have been registerd with bspc but it is not"
        continue
    fi
    echo "for monitor '$mon': found mon_id=${mon_id}"

    # remove the bspwm monitor id from the list if associated xrandr monitor is in the list
    bspwm_monitors=$(echo $bspwm_monitors | sed "/$mon_id/d")
done
echo "non-active BSPWM monitors to be deleted: [$bspwm_monitors]"

# now remove all unassociated monitors
if [ -n "$bspwm_monitors" ]; then
    printf '%s\n' "$bspwm_monitors" | while IFS= read -r bspwm_mon
    do
        echo "going to remove ${bspwm_mon}"
        bspc monitor $bspwm_mon -r
    done
fi

if [[ $monitor_count == 1 ]]; then
    # ensure monitor is registered with bspwm
	if [ $(monitor_id_from_name $MON0) = ""]; then
        echo "Single Monitor: registering \$MON0='$MON0'"
		bspc wm -a $MON0 ${MON0_SIZE}+0+0
	fi
    bspc monitor -d 1 2 3 4 5 6 7 8 9 10
elif [[ $monitor_count == 2 ]]; then

    if [ "$SWAP_DUAL_MONITORS" = "1" ]; then
        echo "swap dual monitors indices"
        TEMP=$MON0
        export MON0=$MON1
        export MON1=$TEMP
        TEMP=$MON0_SIZE
        export MON0_SIZE=$MON1_SIZE
        export MON1_SIZE=$TEMP
        unset TEMP
    fi

    # ensure monitor is registered with bspwm
	if [ -z $(monitor_id_from_name $MON0) ]; then
        echo "Dual Monitor: registering left monitor \$MON0='$MON0'"
		bspc wm -a $MON0 ${MON0_SIZE}+0+0
	fi
    bspc monitor $(monitor_id_from_name $MON0) -d 1 2 3 4 5

    # ensure monitor is registered with bspwm
	if [ -z $(monitor_id_from_name $MON1) ]; then
        echo "Dual Monitor: registering right monitor \$MON1='$MON1'"
        MON0_WIDTH=$(echo $MON0_SIZE | grep -Eo '[0-9]+' | sed '1q;d')
		bspc wm -a $MON1 $MON1_SIZE+$MON0_WIDTH+0
	fi
    bspc monitor $(monitor_id_from_name $MON1) -d 6 7 8 9 10
fi

# if this script is ran a second time to restore monitors
# then there might be orphans that need to be adopted
bspc wm -o

if [ ! -z $(dmesg | grep -i nvidia) ]; then
    echo "nvidia detected"
    xset dpms force off && sleep 1 && xset dpms force on
fi
