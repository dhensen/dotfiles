#!/bin/zsh

. ~/.env
set -Eeuxo pipefail

monitor_count=$(xrandr --listactivemonitors | head -n1 | grep -Eo '[0-9]')

eval $(monitor_detection)

if [[ "$HOST" == "barleduc" ]]; then
    if [[ "$monitor_count" == "3" ]]; then
        #bspc monitor "$MON0" -d 1 2 3 4 5
        bspc monitor "$MON1" -d 1 2 3 4 5
        bspc monitor "$MON2" -d 6 7 8 9 10
        exit 0
    fi
fi

if [[ "$monitor_count" == "2" ]]; then
    if [ "$SWAP_DUAL_MONITORS" = "1" ]; then
        echo "swap dual monitors indices"
        TEMP=$MON0
        export MON0=$MON1
        export MON1=$TEMP
        TEMP=$MON0_SIZE
        export MON0_SIZE=$MON1_SIZE
        export MON1_SIZE=$TEMP
        unset TEMP
    fi

    if [[ "${1:-}" == "restart-monitor" ]]; then
        xrandr --output $MON1 --off
        sleep 2
    fi

    xrandr --output $MON0 --auto --output $MON1 --auto --right-of $MON0
fi

# .Xresources merge is needed to get 96 dpi
xrdb -merge ~/.Xresources

# get connected monitors from xrandr
#monitors=$(pyrandr.py)
monitors=$(xrandr --listactivemonitors | cut -d' ' -f 6 | tail -n+2)

# get active bspwm monitors
# the wm -d gives a json dump where the monitor id's are decimal, the bspc query -M returns hexadecimal
# so keep that in mind when doing dirty string comparisons
bspwm_monitors=$(bspc wm -d | jq ".monitors[].id")

echo "active BSPWM monitors: [$bspwm_monitors]"

monitor_id_from_name() {
    bspc wm -d | jq ".monitors[] | select(.name == \"$1\").id"
}

printf '%s\n' "$monitors" | while IFS= read -r mon
do
    mon_id=$(monitor_id_from_name $mon)
    if [ -z $mon_id ]; then
        echo "for monitor '$mon': should have been registerd with bspc but it is not"
        continue
    fi
    echo "for monitor '$mon': found mon_id=${mon_id}"

    # remove the bspwm monitor id from the list if associated xrandr monitor is in the list
    bspwm_monitors=$(echo $bspwm_monitors | sed "/$mon_id/d")
done
echo "non-active BSPWM monitors to be deleted: [$bspwm_monitors]"

# now remove all unassociated monitors
if [ -n "$bspwm_monitors" ]; then
    printf '%s\n' "$bspwm_monitors" | while IFS= read -r bspwm_mon
    do
        echo "Removing unassociated monitor: ${bspwm_mon}"
        bspc monitor $bspwm_mon -r
    done
fi

if [[ $monitor_count == 1 ]]; then
    # ensure monitor is registered with bspwm
	if [ $(monitor_id_from_name $MON0) = ""]; then
        echo "Single Monitor: registering \$MON0='$MON0'"
		bspc wm -a $MON0 ${MON0_SIZE}+0+0
	fi
    bspc monitor -d 1 2 3 4 5 6 7 8 9 10
elif [[ $monitor_count == 2 ]]; then
    # ensure monitor is registered with bspwm
	if [ -z $(monitor_id_from_name $MON0) ]; then
        echo "Dual Monitor: registering left monitor \$MON0='$MON0'"
		bspc wm -a $MON0 ${MON0_SIZE}+0+0
	fi
    bspc monitor $(monitor_id_from_name $MON0) -d 1 2 3 4 5

    # ensure monitor is registered with bspwm
	if [ -z $(monitor_id_from_name $MON1) ]; then
        echo "Dual Monitor: registering right monitor \$MON1='$MON1'"
        MON0_WIDTH=$(echo $MON0_SIZE | grep -Eo '[0-9]+' | sed '1q;d')
		bspc wm -a $MON1 $MON1_SIZE+$MON0_WIDTH+0
	fi
    bspc monitor $(monitor_id_from_name $MON1) -d 6 7 8 9 10
fi

# if this script is ran a second time to restore monitors
# then there might be orphans that need to be adopted
bspc wm -o

# this line is done for Nvidia, it had to do with videocard to monitor communication
# being buggy, this works around that, there used to be a guard around this
# but dmesg wants sudo these days and I don't want this to need root rights
if [[ $(lspci) =~ nvidia ]]; then
    xset dpms force off && sleep 0.5 && xset dpms force on
fi

